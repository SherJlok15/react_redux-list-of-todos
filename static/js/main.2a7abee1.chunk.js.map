{"version":3,"sources":["redux/actions.js","redux/redusers.js","components/User.js","components/TodoItem.js","components/TodoItemHandler.js","components/TodoList.js","components/TodoListHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD","DISPLAY","REMOVE","SORTING","load","dispatch","type","Promise","all","fetch","then","response","json","_ref","_ref2","Object","slicedToArray","todos","users","todosData","map","todo","person","find","user","id","userId","objectSpread","status","completed","userName","name","userEmail","email","value","initialState","requested","User","props","react_default","a","createElement","Fragment","href","title","TodoItem","className","onClick","remove","index","TodoItemHandler","connect","state","ownProps","newTodos","toConsumableArray","data","filter","item","TodoList","class","sorting","components_TodoItemHandler","key","buttonClick","TodoListHandler","field","sort","b","localeCompare","store","createStore","arguments","length","undefined","action","applyMiddleware","thunk","App","es","components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a7abee1.chunk.js","sourcesContent":["export const LOAD = 'load';\nexport const DISPLAY = 'display';\nexport const REMOVE = 'remove';\nexport const SORTING = 'sorting';\n\nexport function load() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD,\n    });\n    Promise.all([\n      fetch('https://jsonplaceholder.typicode.com/todos')\n        .then(response => response.json()),\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json()),\n    ]).then(([todos, users]) => {\n      const todosData = todos.map((todo) => {\n        const person = users.find(user => user.id === todo.userId);\n        return {\n          ...todo,\n          status: todo.completed ? 'Completed' : 'In process',\n          user: person,\n          userName: person.name,\n          userEmail: person.email,\n        };\n      });\n      dispatch(display(todosData));\n    });\n  };\n}\n\nexport function display(value) {\n  return {\n    type: DISPLAY,\n    value,\n  };\n}\n\nexport function remove(index, todos) {\n  const newTodos = [...todos];\n  return {\n    type: REMOVE,\n    data: newTodos.filter(item => item.id !== index),\n  };\n}\n\nexport function sorting(field, todos) {\n  const newTodos = [...todos];\n  return {\n    type: SORTING,\n    data: newTodos.sort((a, b) => a[field].localeCompare(b[field])),\n  };\n}\n","import {\n  LOAD,\n  DISPLAY,\n  REMOVE,\n  SORTING,\n} from './actions';\n\nconst initialState = {\n  requested: false,\n  todos: null,\n};\n\nexport default function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY:\n      return {\n        ...state,\n        todos: action.value,\n      };\n    case REMOVE:\n      return {\n        ...state,\n        todos: action.data,\n      };\n    case SORTING:\n      return {\n        ...state,\n        todos: action.data,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nexport default function User(props) {\n  return (\n    <React.Fragment>\n      <a href={'mailto:' + props.email} title=\"click to mail\">{props.user}</a>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport User from './User';\n\nfunction TodoItem(props) {\n  return (\n    <tr>\n      <td>{props.title}</td>\n      <td><User user={props.user} email={props.email} /></td>\n      <td className={props.status === 'Completed' ? 'completed' : 'inProces'}>{props.status} <span className=\"cross\" title=\"click to remove\" onClick={() => props.remove(props.index, props.todos)}>&times;</span></td>\n    </tr>\n  );\n}\n\nexport default TodoItem;\n","import { connect } from 'react-redux';\nimport TodoItem from './TodoItem';\nimport { remove } from '../redux/actions';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    title: ownProps.todo.title,\n    index: ownProps.index,\n    user: ownProps.todo.userName,\n    email: ownProps.todo.userEmail,\n    status: ownProps.todo.status,\n    todos: state.todos,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    remove: (index, todos) => dispatch(remove(index, todos)),\n  };\n}\n\nconst TodoItemHandler = connect(mapStateToProps, mapDispatchToProps)(TodoItem);\nexport default TodoItemHandler;\n","import React from 'react';\nimport TodoItemHandler from './TodoItemHandler';\n\nfunction TodoList(props) {\n  if (!props.requested) {\n    return (\n      <div>\n        <button className=\"initialButton\" type=\"button\" title=\"click to load TODOS\" onClick={props.buttonClick}>Load</button>\n      </div>\n    );\n  }\n  if (props.todos === null) {\n    return <div className=\"myPreloader\"><p>Loading</p><div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>;\n  }\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td title=\"click to sort\" onClick={() => props.sorting('title', props.todos)}>Title</td>\n          <td title=\"click to sort\" onClick={() => props.sorting('userName', props.todos)}>Author</td>\n          <td title=\"click to sort\" onClick={() => props.sorting('status', props.todos)}>Status</td>\n        </tr>\n      </thead>\n      <tbody>\n        {props.todos.map((item, index) => <TodoItemHandler todo={item} index={item.id} key={item.id}/>)}\n      </tbody>\n    </table>\n  );\n}\n\nexport default TodoList;\n","import { connect } from 'react-redux';\nimport TodoList from './TodoList';\nimport { load, sorting } from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    requested: state.requested,\n    todos: state.todos,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonClick: () => {\n      dispatch(load());\n    },\n    sorting: (field, todos) => {\n      dispatch(sorting(field, todos));\n    },\n  };\n}\n\nconst TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\nexport default TodoListHandler;\n","import React from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport getNextState from './redux/redusers';\nimport TodoListHandler from './components/TodoListHandler';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}